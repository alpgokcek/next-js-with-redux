{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport postsReducer from '../reducers/posts';\nimport commentsReducer from '../reducers/comments';\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (true) {\n    var _require = require('redux-devtools-extension'),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nexport var initStore = function initStore() {\n  return createStore(combineReducers({\n    postsReducer: postsReducer,\n    commentsReducer: commentsReducer\n  }), bindMiddleware([thunkMiddleware]));\n};","map":{"version":3,"sources":["/Users/alpgokcek/Desktop/next-js-poc/store/store.js"],"names":["createStore","applyMiddleware","combineReducers","thunkMiddleware","postsReducer","commentsReducer","bindMiddleware","middleware","require","composeWithDevTools","initStore"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,UAAU,EAAI;AACnC,YAA2C;AAAA,mBACTC,OAAO,CAAC,0BAAD,CADE;AAAA,QACjCC,mBADiC,YACjCA,mBADiC;;AAEzC,WAAOA,mBAAmB,CAACR,eAAe,MAAf,4BAAmBM,UAAnB,EAAD,CAA1B;AACD;;AACD,SAAON,eAAe,MAAf,4BAAmBM,UAAnB,EAAP;AACD,CAND;;AAQA,OAAO,IAAMG,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,SAAOV,WAAW,CAACE,eAAe,CAAC;AACjCE,IAAAA,YAAY,EAAZA,YADiC;AACnBC,IAAAA,eAAe,EAAfA;AADmB,GAAD,CAAhB,EAEfC,cAAc,CAAC,CAACH,eAAD,CAAD,CAFC,CAAlB;AAGD,CAJM","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport postsReducer from '../reducers/posts';\nimport commentsReducer from '../reducers/comments';\n\nconst bindMiddleware = middleware => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { composeWithDevTools } = require('redux-devtools-extension')\n    return composeWithDevTools(applyMiddleware(...middleware))\n  }\n  return applyMiddleware(...middleware)\n}\n\nexport const initStore = () => {\n  return createStore(combineReducers({\n    postsReducer, commentsReducer\n  }),bindMiddleware([thunkMiddleware]))\n}\n"]},"metadata":{},"sourceType":"module"}